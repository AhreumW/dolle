<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.edu.reservation">

	<sql id="search">
		<choose>
			<!-- 전체 검색일 경우  -->
        	<when test="searchOption == 'both'">
        		AND (MEMBER_NAME LIKE '%' || #{keyword} || '%'
					OR TOUR_NAME LIKE '%' || #{keyword} || '%')
        	</when>
        	<!-- 회원 이름 검색일 경우  -->
        	<when test="searchOption == 'memberName'">
        		AND MEMBER_NAME LIKE '%' || #{keyword} || '%'
        	</when>
        	<!-- 투어 번호 검색일 경우  -->
        	<when test="searchOption == 'tourName'">
        		AND TOUR_NAME LIKE '%' || #{keyword} || '%'
        	</when>
        </choose>
	</sql>

	<resultMap type="com.edu.reservation.vo.ReservationVo" id="reservationResultMap">
		<id column="RESERVE_IDX" property="reserveNo" />
		<result column="TOUR_IDX" property="tourNo" />
		<result column="TOUR_NAME" property="tourName" />
		<result column="MEMBER_IDX" property="memberNo" />
		<result column="MEMBER_NAME" property="memberName" />
		<result column="MEMBER_EMAIL" property="memberEmail" />
		<result column="MEMBER_AGE" property="memberAge" />
		<result column="RESERVE_TOUR_DATE" property="reserveTourDate" javaType="java.util.Date" />
		<result column="RESERVE_TOUR_DAY" property="reserveTourDay" />
		<result column="RESERVE_APPLY_NUM" property="reserveApplyNum" />
		<result column="RESERVE_APPLY_NUM_SUM" property="reserveApplyNumSum" />
		<result column="RESERVE_TOUR_PEOPLE_NUM" property="reserveTourPeopleNum" />
		<result column="RESERVE_PRICE" property="reservePrice" />
		<result column="RESERVE_APPLY_DATE" property="reserveApplyDate" javaType="java.util.Date" />
		<result column="RESERVE_DEPOSIT_DATE" property="reserveDepositDate" javaType="java.util.Date" />
		<result column="RESERVE_DEPOSIT_STATE" property="reserveDepositState" />
	</resultMap>
	
	<resultMap type="com.edu.reservation.vo.TourVo" id="tourResultMap">
		<id column="TOUR_IDX" property="tourNo" />
		<result column="TOWN_IDX" property="townNo" />
		<result column="TOUR_NAME" property="tourName" />
		<result column="TOUR_START_DATE" property="tourStartDate" javaType="java.util.Date" />
		<result column="TOUR_END_DATE" property="tourEndDate" javaType="java.util.Date" />
		<result column="TOUR_CLOSED_START_DATE" property="tourClosedStartDate" javaType="java.util.Date" />
		<result column="TOUR_CLOSED_END_DATE" property="tourClosedEndDate" javaType="java.util.Date" />
		<result column="TOUR_CLOSED_CONTENT" property="tourClosedContent" />
		<result column="TOUR_START_TIME" property="tourStartTime" />
		<result column="TOUR_END_TIME" property="tourEndTime" />
		<result column="TOUR_PRICE" property="tourPrice" />
		<result column="TOUR_PEOPLE_NUM" property="tourPeopleNum" />
		<result column="TOUR_STARTING_POINT" property="tourStartingPoint" />
		<result column="TOUR_CONTENT" property="tourContent" />
		<result column="TOUR_CRE_DATE" property="tourCreDate" javaType="java.util.Date" />
		<result column="TOUR_MOD_DATE" property="tourModDate" javaType="java.util.Date" />
		<result column="TOUR_DEL_YN" property="tourDel" />
		<result column="TOUR_POSSIBLE_NUM" property="tourPossibleNum" />
		<result column="TOUR_RESERVED_NUM" property="tourReservedNum" />
		<result column="TOUR_ACCOUNT_NUM" property="tourAccountNum" />
		<result column="TOUR_BANK" property="tourBank" />
		<result column="TOUR_DEPOSITOR" property="tourDepositor" />
	</resultMap>  
	
	<resultMap type="com.edu.reservation.vo.ClosedDayVo" id="closedDayResultMap">
		<id column="CLOSED_IDX" property="closedNo" />
		<result column="TOUR_IDX" property="tourNo" />
		<result column="CLOSED_START_DATE" property="closedStartDate" javaType="java.util.Date" />
		<result column="CLOSED_END_DATE" property="closedEndDate" javaType="java.util.Date" />
		<result column="CLOSED_CONTENT" property="closedContent" />
	</resultMap> 
	
	<resultMap type="com.edu.reservation.vo.TourFileVo" id="tourFileResultMap">
		<id column="TOUR_IDX" property="tourNo" />
		<result column="TOWN_IDX" property="townNo" />
		<result column="TOUR_NAME" property="tourName" />
		<result column="TOUR_START_DATE" property="tourStartDate" javaType="java.util.Date" />
		<result column="TOUR_END_DATE" property="tourEndDate" javaType="java.util.Date" />
		<result column="TOUR_CLOSED_START_DATE" property="tourClosedStartDate" javaType="java.util.Date" />
		<result column="TOUR_CLOSED_END_DATE" property="tourClosedEndDate" javaType="java.util.Date" />
		<result column="TOUR_CLOSED_CONTENT" property="tourClosedContent" />
		<result column="TOUR_START_TIME" property="tourStartTime" />
		<result column="TOUR_END_TIME" property="tourEndTime" />
		<result column="TOUR_PRICE" property="tourPrice" />
		<result column="TOUR_PEOPLE_NUM" property="tourPeopleNum" />
		<result column="TOUR_STARTING_POINT" property="tourStartingPoint" />
		<result column="TOUR_CONTENT" property="tourContent" />
		<result column="TOUR_CRE_DATE" property="tourCreDate" javaType="java.util.Date" />
		<result column="TOUR_MOD_DATE" property="tourModDate" javaType="java.util.Date" />
		<result column="TOUR_DEL_YN" property="tourDel" />
		<result column="TOUR_POSSIBLE_NUM" property="tourPossibleNum" />
		<result column="TOUR_RESERVED_NUM" property="tourReservedNum" />
		<result column="TOUR_ACCOUNT_NUM" property="tourAccountNum" />
		<result column="TOUR_BANK" property="tourBank" />
		<result column="TOUR_DEPOSITOR" property="tourDepositor" />
		
		<result column="REVIEW_FILE_IDX" property="fileIdx"/>
		<result column="REVIEW_IDX" property="fileReviewIdx"/>
		<result column="REVIEW_ORIGINAL_FILE_NAME" property="fileOriginalName"/>
		<result column="REVIEW_STORED_FILE_NAME" property="fileStoredName"/>
	</resultMap>
	
<!-- 	<select id="tourSelectList" parameterType="map" resultMap="tourResultMap"> -->
<!-- 		SELECT TOUR_IDX, TOWN_IDX, TOUR_NAME, TOUR_START_DATE, -->
<!-- 		TOUR_END_DATE, TOUR_START_TIME, TOUR_END_TIME, TOUR_PRICE, -->
<!-- 		TOUR_PEOPLE_NUM, TOUR_STARTING_POINT, TOUR_CONTENT, TOUR_CRE_DATE, -->
<!-- 		TOUR_MOD_DATE, TOUR_DEL_YN -->
<!-- 		FROM TOUR -->
<!-- 	</select> -->
	
	<select id="tourSelectList" parameterType="map" resultMap="tourFileResultMap">
		SELECT T.TOUR_IDX, TOWN_IDX, TOUR_NAME, TOUR_START_DATE,
		TOUR_END_DATE, TOUR_START_TIME, TOUR_END_TIME, TOUR_PRICE,
		TOUR_PEOPLE_NUM, TOUR_STARTING_POINT, TOUR_CONTENT, TOUR_CRE_DATE,
		TOUR_MOD_DATE, TOUR_DEL_YN, TOUR_STORED_FILE_NAME AS REVIEW_STORED_FILE_NAME
		FROM TOUR T, TOUR_FILE TF
        WHERE T.TOUR_IDX = TF.TOUR_IDX
        ORDER BY T.TOUR_IDX DESC
	</select> 
	
	<select id="tourSelectOne" parameterType="int" resultMap="tourFileResultMap">
		SELECT T.TOUR_IDX, TOWN_IDX, TOUR_NAME, TOUR_START_DATE,
		TOUR_END_DATE, TOUR_START_TIME, TOUR_END_TIME, TOUR_PRICE,
		TOUR_PEOPLE_NUM, TOUR_STARTING_POINT, TOUR_CONTENT, TOUR_CRE_DATE,
		TOUR_MOD_DATE, TOUR_DEL_YN,
		(SELECT A1.ACC_ACCOUNT_NUM
	    FROM TOUR T1, ACCOUNT_MANAGEMENT A1
	    WHERE T1.TOWN_IDX = A1.TOWN_IDX
	    AND T1.TOUR_IDX = #{tourNo}) AS TOUR_ACCOUNT_NUM,
	    (SELECT A1.ACC_BANK
	    FROM TOUR T1, ACCOUNT_MANAGEMENT A1
	    WHERE T1.TOWN_IDX = A1.TOWN_IDX
	    AND T1.TOUR_IDX = #{tourNo}) AS TOUR_BANK,
	    (SELECT A1.ACC_DEPOSITOR
	    FROM TOUR T1, ACCOUNT_MANAGEMENT A1
	    WHERE T1.TOWN_IDX = A1.TOWN_IDX
	    AND T1.TOUR_IDX = #{tourNo}) AS TOUR_DEPOSITOR,
        TOUR_STORED_FILE_NAME AS REVIEW_STORED_FILE_NAME
	    
		FROM TOUR T, TOUR_FILE TF
		WHERE T.TOUR_IDX = #{tourNo}
		AND T.TOUR_IDX = TF.TOUR_IDX	
	</select>
	
	<select id="tourSelectAllFromOne" parameterType="int" resultMap="tourFileResultMap">
		SELECT T.TOUR_IDX, TOWN_IDX, TOUR_NAME, TOUR_START_DATE, TOUR_END_DATE, 
        (SELECT CLOSED_START_DATE
        FROM CLOSED_DAY
        WHERE TOUR_IDX = 1) AS TOUR_CLOSED_START_DATE,
        (SELECT CLOSED_END_DATE
        FROM CLOSED_DAY
        WHERE TOUR_IDX = 1) AS TOUR_CLOSED_END_DATE,
        (SELECT CLOSED_CONTENT
        FROM CLOSED_DAY
        WHERE TOUR_IDX = 1) AS TOUR_CLOSED_CONTENT,
        (SELECT A1.ACC_ACCOUNT_NUM
	    FROM TOUR T1, ACCOUNT_MANAGEMENT A1
	    WHERE T1.TOWN_IDX = A1.TOWN_IDX
	    AND T1.TOUR_IDX = #{tourNo}) AS TOUR_ACCOUNT_NUM,
	    (SELECT A1.ACC_BANK
	    FROM TOUR T1, ACCOUNT_MANAGEMENT A1
	    WHERE T1.TOWN_IDX = A1.TOWN_IDX
	    AND T1.TOUR_IDX = #{tourNo}) AS TOUR_BANK,
	    (SELECT A1.ACC_DEPOSITOR
	    FROM TOUR T1, ACCOUNT_MANAGEMENT A1
	    WHERE T1.TOWN_IDX = A1.TOWN_IDX
	    AND T1.TOUR_IDX = #{tourNo}) AS TOUR_DEPOSITOR,
        TOUR_START_TIME, TOUR_END_TIME, TOUR_PRICE,
		TOUR_PEOPLE_NUM, TOUR_STARTING_POINT, TOUR_CONTENT, TOUR_CRE_DATE,
		TOUR_MOD_DATE, TOUR_DEL_YN,
		TOUR_STORED_FILE_NAME AS REVIEW_STORED_FILE_NAME
		
		FROM TOUR T, TOUR_FILE TF
		WHERE T.TOUR_IDX = #{tourNo}
		AND T.TOUR_IDX = TF.TOUR_IDX
	</select>
	
	<select id="tourAndReservationSelectAllFromOne" parameterType="map" resultMap="tourFileResultMap">
		SELECT T.TOUR_IDX AS TOUR_IDX, TOWN_IDX, TOUR_NAME, TOUR_START_DATE, TOUR_END_DATE, 
	    C.CLOSED_START_DATE AS TOUR_CLOSED_START_DATE,
	    C.CLOSED_END_DATE AS TOUR_CLOSED_END_DATE,
	    C.CLOSED_CONTENT AS TOUR_CLOSED_CONTENT,
	    (SELECT SUM(R.RESERVE_APPLY_NUM)
	    FROM RESERVE R, TOUR T
	    WHERE R.TOUR_IDX = T.TOUR_IDX
	    AND R.RESERVE_TOUR_DATE = #{reserveTourDate}
	    AND R.RESERVE_DEPOSIT_STATE = 'active'
	    GROUP BY R.TOUR_IDX
	    HAVING R.TOUR_IDX = #{tourNo}) as TOUR_RESERVED_NUM,
	    (T.TOUR_PEOPLE_NUM - (SELECT SUM(R.RESERVE_APPLY_NUM)
	    FROM RESERVE R, TOUR T
	    WHERE R.TOUR_IDX = T.TOUR_IDX
	    AND R.RESERVE_TOUR_DATE = #{reserveTourDate}
	    AND R.RESERVE_DEPOSIT_STATE = 'active'
	    GROUP BY R.TOUR_IDX
	    HAVING R.TOUR_IDX = #{tourNo})) AS TOUR_POSSIBLE_NUM,
	    
	    (SELECT A1.ACC_ACCOUNT_NUM
	    FROM TOUR T1, ACCOUNT_MANAGEMENT A1
	    WHERE T1.TOWN_IDX = A1.TOWN_IDX
	    AND T1.TOUR_IDX = #{tourNo}) AS TOUR_ACCOUNT_NUM,
	    (SELECT A1.ACC_BANK
	    FROM TOUR T1, ACCOUNT_MANAGEMENT A1
	    WHERE T1.TOWN_IDX = A1.TOWN_IDX
	    AND T1.TOUR_IDX = #{tourNo}) AS TOUR_BANK,
	    (SELECT A1.ACC_DEPOSITOR
	    FROM TOUR T1, ACCOUNT_MANAGEMENT A1
	    WHERE T1.TOWN_IDX = A1.TOWN_IDX
	    AND T1.TOUR_IDX = #{tourNo}) AS TOUR_DEPOSITOR,
	    
	    TOUR_START_TIME, TOUR_END_TIME, TOUR_PRICE,
		TOUR_PEOPLE_NUM, TOUR_STARTING_POINT, TOUR_CONTENT, TOUR_CRE_DATE,
		TOUR_MOD_DATE, TOUR_DEL_YN,
		TOUR_STORED_FILE_NAME AS REVIEW_STORED_FILE_NAME
	    
	    FROM TOUR T, CLOSED_DAY C, TOUR_FILE TF
	    WHERE C.TOUR_IDX = 1
		<!-- WHERE C.TOUR_IDX = T.TOUR_IDX -->
	    AND T.TOUR_IDX = #{tourNo}
	    AND T.TOUR_IDX = TF.TOUR_IDX
	</select>
	
	<insert id="tourReservationInsertOne" parameterType="map">
		INSERT INTO RESERVE
		(RESERVE_IDX, TOUR_IDX, MEMBER_IDX,       
		RESERVE_TOUR_DATE, RESERVE_APPLY_NUM, RESERVE_PRICE, RESERVE_APPLY_DATE,
		RESERVE_DEPOSIT_DATE)
		VALUES
		(SEQ_RESERVE_NO.NEXTVAL, #{tourNo}, #{memberNo},
		#{reserveTourDate}, #{reserveApplyNum}, #{reservePrice}, SYSDATE,
		NULL)
	</insert>
	
	<select id="reservationSelectNewestOne" parameterType="map" resultMap="reservationResultMap">
		SELECT RESERVE_IDX, TOUR_IDX, MEMBER_IDX,       
		RESERVE_TOUR_DATE, RESERVE_APPLY_NUM, RESERVE_PRICE, RESERVE_APPLY_DATE,
		RESERVE_DEPOSIT_DATE, RESERVE_DEPOSIT_STATE
		FROM RESERVE
		WHERE RESERVE_IDX = (SELECT MAX(RESERVE_IDX)
							FROM RESERVE)
	</select>
	
	<select id="tourReservationSelectList" parameterType="map" resultMap="reservationResultMap">
		SELECT RESERVE_TOUR_DATE, (SELECT TOUR_NAME
									FROM TOUR
									WHERE TOUR_IDX = 1) AS TOUR_NAME,
		TO_CHAR(RESERVE_TOUR_DATE, 'DY') AS RESERVE_TOUR_DAY, SUM(RESERVE_APPLY_NUM) AS RESERVE_APPLY_NUM_SUM
		FROM RESERVE
		WHERE RESERVE_DEPOSIT_STATE = 'active'
<!-- 		AND TOUR_IDX = 1 -->
		AND RESERVE_TOUR_DATE BETWEEN '20200701' AND '20200731'
		GROUP BY RESERVE_TOUR_DATE
        ORDER BY RESERVE_TOUR_DATE ASC
	</select>
	
	<select id="tourReservationSelectListAll" parameterType="map" resultMap="reservationResultMap">
		<!-- 	SELECT R.RESERVE_IDX, M.MEMBER_NAME AS MEMBER_NAME, M.MEMBER_EMAIL AS MEMBER_EMAIL,  -->
		<!-- 	TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), M.MEMBER_BIRTHDATE) / 12) AS MEMBER_AGE,  -->
		<!-- 	R.TOUR_IDX,  -->
		<!--    T.TOUR_NAME, -->
		<!--    R.RESERVE_TOUR_DATE, R.RESERVE_APPLY_NUM, R.RESERVE_DEPOSIT_STATE, R.RESERVE_DEPOSIT_DATE -->
		<!-- 	FROM RESERVE R, MEMBER M, TOUR T -->
		<!-- 	WHERE R.MEMBER_IDX = M.MEMBER_IDX -->
		<!--    AND R.TOUR_IDX = T.TOUR_IDX -->
		SELECT *
		FROM (SELECT ROWNUM RNUM, AHREUM.*
    	FROM(SELECT R.RESERVE_IDX, M.MEMBER_NAME AS MEMBER_NAME, M.MEMBER_EMAIL AS MEMBER_EMAIL, 
		TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), M.MEMBER_BIRTHDATE) / 12) AS MEMBER_AGE, 
		R.TOUR_IDX, 
        T.TOUR_NAME,
        R.RESERVE_TOUR_DATE, R.RESERVE_APPLY_NUM, R.RESERVE_DEPOSIT_STATE, R.RESERVE_DEPOSIT_DATE,
        T.TOUR_PEOPLE_NUM AS RESERVE_TOUR_PEOPLE_NUM
		FROM RESERVE R, MEMBER M, TOUR T
		WHERE R.MEMBER_IDX = M.MEMBER_IDX
        AND R.TOUR_IDX = T.TOUR_IDX
        AND T.TOUR_DEL_YN = 'n'
        AND M.MEMBER_DEL_YN = 'n'
		<!-- 검색 -->
		<include refid="search"></include>
		ORDER BY R.RESERVE_IDX DESC
		) AHREUM )
        WHERE RNUM BETWEEN #{start} AND #{end}
	</select>

	<select id="tourReservationSelectListPaid" parameterType="map" resultMap="reservationResultMap">
		<!-- SELECT R.RESERVE_IDX, M.MEMBER_NAME AS MEMBER_NAME, M.MEMBER_EMAIL AS MEMBER_EMAIL,  -->
		<!-- TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), M.MEMBER_BIRTHDATE) / 12) AS MEMBER_AGE,  -->
		<!-- R.TOUR_IDX, R.RESERVE_TOUR_DATE, R.RESERVE_APPLY_NUM, R.RESERVE_DEPOSIT_STATE, R.RESERVE_DEPOSIT_DATE -->
		<!-- FROM RESERVE R, MEMBER M -->
		<!-- WHERE R.MEMBER_IDX = M.MEMBER_IDX -->
		<!-- AND R.RESERVE_DEPOSIT_STATE = 'paid' -->
		SELECT *
		FROM (SELECT ROWNUM RNUM, AHREUM.*
    	FROM(SELECT R.RESERVE_IDX, M.MEMBER_NAME AS MEMBER_NAME, M.MEMBER_EMAIL AS MEMBER_EMAIL, 
		TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), M.MEMBER_BIRTHDATE) / 12) AS MEMBER_AGE, 
		R.TOUR_IDX, 
        T.TOUR_NAME,
        R.RESERVE_TOUR_DATE, R.RESERVE_APPLY_NUM, R.RESERVE_DEPOSIT_STATE, R.RESERVE_DEPOSIT_DATE,
        T.TOUR_PEOPLE_NUM AS RESERVE_TOUR_PEOPLE_NUM
		FROM RESERVE R, MEMBER M, TOUR T
		WHERE R.MEMBER_IDX = M.MEMBER_IDX
        AND R.TOUR_IDX = T.TOUR_IDX
        AND T.TOUR_DEL_YN = 'n'
        AND M.MEMBER_DEL_YN = 'n'
        AND R.RESERVE_DEPOSIT_STATE = 'paid'
        <!-- 검색 -->
		<include refid="search"></include>
		ORDER BY R.RESERVE_IDX DESC
		) AHREUM )
        WHERE RNUM BETWEEN #{start} AND #{end}
	</select>

	<select id="tourReservationSelectListCanceled" parameterType="map" resultMap="reservationResultMap">
		<!-- SELECT R.RESERVE_IDX, M.MEMBER_NAME AS MEMBER_NAME, M.MEMBER_EMAIL AS MEMBER_EMAIL,  -->
		<!-- TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), M.MEMBER_BIRTHDATE) / 12) AS MEMBER_AGE,  -->
		<!-- R.TOUR_IDX, R.RESERVE_TOUR_DATE, R.RESERVE_APPLY_NUM, R.RESERVE_DEPOSIT_STATE, R.RESERVE_DEPOSIT_DATE -->
		<!-- FROM RESERVE R, MEMBER M -->
		<!-- WHERE R.MEMBER_IDX = M.MEMBER_IDX -->
		<!-- AND R.RESERVE_DEPOSIT_STATE = 'canceled' -->
		SELECT *
		FROM (SELECT ROWNUM RNUM, AHREUM.*
    	FROM(SELECT R.RESERVE_IDX, M.MEMBER_NAME AS MEMBER_NAME, M.MEMBER_EMAIL AS MEMBER_EMAIL, 
		TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), M.MEMBER_BIRTHDATE) / 12) AS MEMBER_AGE, 
		R.TOUR_IDX, 
        T.TOUR_NAME,
        R.RESERVE_TOUR_DATE, R.RESERVE_APPLY_NUM, R.RESERVE_DEPOSIT_STATE, R.RESERVE_DEPOSIT_DATE,
        T.TOUR_PEOPLE_NUM AS RESERVE_TOUR_PEOPLE_NUM
		FROM RESERVE R, MEMBER M, TOUR T
		WHERE R.MEMBER_IDX = M.MEMBER_IDX
        AND R.TOUR_IDX = T.TOUR_IDX
        AND T.TOUR_DEL_YN = 'n'
        AND M.MEMBER_DEL_YN = 'n'
        AND R.RESERVE_DEPOSIT_STATE = 'canceled'
        <!-- 검색 -->
		<include refid="search"></include>
		ORDER BY R.RESERVE_IDX DESC
		) AHREUM )
        WHERE RNUM BETWEEN #{start} AND #{end}
	</select>

	<update id="tourUpdateOne" parameterType="map">
		UPDATE TOUR
		SET
		TOUR_NAME = #{tourName}, TOUR_START_DATE = #{tourStartDate},  TOUR_END_DATE = #{tourEndDate}, 
		TOUR_START_TIME = #{tourStartTime},  TOUR_END_TIME = #{tourEndTime},
		TOUR_PEOPLE_NUM = #{tourPeopleNum},
		TOUR_PRICE = #{tourPrice},
		TOUR_STARTING_POINT = #{tourStartingPoint},
		TOUR_CONTENT = #{tourContent},
		TOUR_MOD_DATE = SYSDATE
		WHERE TOUR_IDX = #{tourNo}
	</update>
	
	<update id="tourDeleteOne" parameterType="int">
		UPDATE TOUR
		SET
		TOUR_NAME = SEQ_TOUR_DEL_NO.NEXTVAL, 
		TOUR_MOD_DATE = SYSDATE,
		TOUR_DEL_YN = 'y'
		WHERE TOUR_IDX = #{tourNo}
	</update>
	
	<insert id="tourInsertOne" parameterType="map">
		INSERT INTO TOUR
		(TOUR_IDX, TOWN_IDX, TOUR_NAME, TOUR_START_DATE, TOUR_END_DATE, TOUR_START_TIME, TOUR_END_TIME, TOUR_PRICE, TOUR_PEOPLE_NUM, TOUR_STARTING_POINT, TOUR_CONTENT)
		VALUES(SEQ_TOUR_NO.NEXTVAL, 1, #{tourName}, #{tourStartDate}, #{tourEndDate}, #{tourStartTime}, #{tourEndTime}, #{tourPrice}, #{tourPeopleNum}, #{tourStartingPoint}, #{tourContent})
	</insert>
	
	<!-- 아름누나 페이징 -->
	<select id="reservationSelectTotalCount" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM RESERVE R, MEMBER M, TOUR T
		WHERE R.MEMBER_IDX = M.MEMBER_IDX
        AND T.TOUR_IDX = R.TOUR_IDX
		<!-- 검색 -->
		<include refid="search"></include>
	</select>
	
	<select id="reservationSelectTotalCountPaid" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM RESERVE R, MEMBER M, TOUR T
		WHERE R.MEMBER_IDX = M.MEMBER_IDX
        AND T.TOUR_IDX = R.TOUR_IDX
        AND R.RESERVE_DEPOSIT_STATE = 'paid'
		<!-- 검색 -->
		<include refid="search"></include>
	</select>
	
	<select id="reservationSelectTotalCountCanceled" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM RESERVE R, MEMBER M, TOUR T
		WHERE R.MEMBER_IDX = M.MEMBER_IDX
        AND T.TOUR_IDX = R.TOUR_IDX
        AND R.RESERVE_DEPOSIT_STATE = 'canceled'
		<!-- 검색 -->
		<include refid="search"></include>
	</select>
	
	<!-- 관리자용 다중승인 -->
	<delete id="reservationConfirmList" parameterType="java.util.List">
		<if test="list.size != 0">
		UPDATE RESERVE
		SET
		RESERVE_DEPOSIT_STATE = 'active'
		WHERE RESERVE_IDX IN
			<foreach collection="list" item="item"
				open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
	</delete>
	
	<!-- 관리자용 다중취소-->
	<delete id="reservationCancelList" parameterType="java.util.List">
		<if test="list.size != 0">
		UPDATE RESERVE
		SET
		RESERVE_DEPOSIT_STATE = 'canceled'
		WHERE RESERVE_IDX IN
			<foreach collection="list" item="item"
				open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
	</delete>
	
	<!-- 관리자용 다중삭제 -->
	<delete id="reservationDeleteList" parameterType="java.util.List">
		<if test="list.size != 0">
		DELETE FROM RESERVE
		WHERE RESERVE_IDX IN
			<foreach collection="list" item="item"
				open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
	</delete>
	
	<!-- 투어 휴무일 시작 -->
	<select id="tourClosedDaySelectOne" parameterType="map" resultMap="closedDayResultMap">
		SELECT CLOSED_IDX, TOUR_IDX, CLOSED_START_DATE, CLOSED_END_DATE,
    	CLOSED_CONTENT
		FROM CLOSED_DAY
		WHERE CLOSED_IDX = 1
	</select>
	
	<update id="tourClosedDayUpdateOne" parameterType="map">
		UPDATE CLOSED_DAY
		SET
		CLOSED_START_DATE = #{closedStartDate}, 
		CLOSED_END_DATE = #{closedEndDate},
		CLOSED_CONTENT = #{closedContent}
		WHERE TOUR_IDX = 1
	</update>
	<!-- 투어 휴무일 끝 -->
	
	<!-- 파일 -->
	<select id="tourNewestSelectIdx" resultType="int">
		SELECT TOUR_IDX 
		FROM (SELECT ROWNUM, TOUR_IDX
        	FROM TOUR
        	ORDER BY TOUR_IDX DESC)
		WHERE ROWNUM = 1
	</select>
	<insert id="fileInsertOne" parameterType="map">
		INSERT INTO TOUR_FILE
		(TOUR_FILE_IDX, TOUR_IDX, TOUR_ORIGINAL_FILE_NAME, TOUR_STORED_FILE_NAME, TOUR_FILE_SIZE)
		VALUES(SEQ_TOUR_FILE_NO.NEXTVAL, #{tour_idx}, #{tour_original_file_name},
			 #{tour_stored_file_name}, #{tour_file_size})
	</insert>
	<delete id="fileDeleteOne" parameterType="int">
		DELETE FROM TOUR_FILE
		WHERE TOUR_IDX = #{tour_idx}
	</delete>
	<select id="fileSelectStoredName" parameterType="int"
		resultType="map">
		SELECT TOUR_FILE_IDX, TOUR_STORED_FILE_NAME
		FROM TOUR_FILE
		WHERE TOUR_IDX = #{tour_idx}
	</select>
	<update id="fileUpdateOne" parameterType="map">
		UPDATE TOUR_FILE
		SET TOUR_ORIGINAL_FILE_NAME = #{tour_original_file_name}
		, TOUR_STORED_FILE_NAME = #{tour_stored_file_name}
		, TOUR_FILE_SIZE = #{tour_file_size}
		WHERE TOUR_IDX = #{tour_idx}
	</update>
	
</mapper>