<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.edu.member">

	<sql id="search">
		<choose>
        	<!-- 검색옵션이 전체 검색일 경우  -->
        	<when test="searchOption == 'all'">
        		WHERE (MEMBER_NAME LIKE '%' || #{keyword} || '%'
        		OR    MEMBER_EMAIL LIKE '%' || #{keyword} || '%')
        	</when>
        	
        	<!-- 전체 검색이 아닐 경우 -->
        	<when test="searchOption == 'name'">
        		WHERE MEMBER_NAME LIKE '%' || #{keyword} || '%'
        	</when>
        	<when test="searchOption == 'email'">
        		WHERE MEMBER_EMAIL LIKE '%' || #{keyword} || '%'
        	</when>
        </choose>
	</sql>

	<resultMap type="com.edu.member.vo.MemberVo"
		id="memberResultMap">
		<id column="MEMBER_IDX" property="no" />
		<result column="MEMBER_NAME" property="name" />
		<result column="MEMBER_NICKNAME" property="nickname" />
		<result column="MEMBER_EMAIL" property="email" />
		<result column="MEMBER_PASSWORD" property="password" />
		<result column="MEMBER_PHONE" property="phone" />
		<result column="MEMBER_BIRTHDATE" property="birthdate" javaType="java.util.Date" />
		<result column="MEMBER_NATIONAL" property="national" />
		<result column="MEMBER_CRE_DATE" property="createDate" javaType="java.util.Date" />
		<result column="MEMBER_MOD_DATE" property="modifiedDate" javaType="java.util.Date" />
		<result column="MEMBER_GRADE" property="grade" />
		<result column="MEMBER_DEL_YN" property="del" />
		<result column="MEMBER_TEMP_PWD" property="tempPassword" />
		<result column="TOUR_IDX" property="tourIdx" />
		<result column="TOUR_NAME" property="tourName" />
		<result column="RESERVE_IDX" property="reserveIdx" />
		<result column="RESERVE_APPLY_DATE" property="reserveApplyDate" javaType="java.util.Date" />
		<result column="RESERVE_DEPOSIT_DATE" property="reserveDepositDate" javaType="java.util.Date" />
		<result column="RESERVE_DEPOSIT_STATE" property="reserveDepositState" />
		<result column="RESERVE_APPLY_NUM" property="reserveApplyNum" />
		<result column="RESERVE_PRICE" property="reservePrice" />
		<result column="TOUR_ACCOUNT_NUM" property="tourAccountNum" />
		<result column="ACC_BANK" property="accBank" />
		<result column="ACC_DEPOSITOR" property="accDepositor" />
		<result column="REVIEW_IDX" property="reviewIdx" />
		<result column="REVIEW_TITLE" property="reviewTitle" />
		<result column="REVIEW_CONTENT" property="reviewContent" />
		<result column="REVIEW_CRE_DATE" property="reviewCreDate" javaType="java.util.Date" />
		<result column="REVIEW_MOD_DATE" property="reviewModDate" javaType="java.util.Date" />
		<result column="REVIEW_READ_COUNT" property="reviewReadCount" />
		<result column="REVIEW_LIKE_COUNT" property="reviewLikeCount" />
		<result column="REVIEW_RATING" property="reviewRating" />
		<result column="TOWN_NAME" property="townName" />
		<result column="COMMENT_COUNT" property="commentCount" />
	</resultMap>
	
	<select id="userList" parameterType="map" resultMap="memberResultMap">
		SELECT MEMBER_IDX, MEMBER_NAME, MEMBER_EMAIL, MEMBER_PHONE, MEMBER_BIRTHDATE, MEMBER_PASSWORD, MEMBER_NATIONAL
		FROM MEMBER
	</select>

	<select id="memberSelectList" parameterType="map" resultMap="memberResultMap">
		SELECT * 
		FROM (SELECT ROWNUM AS RNUM, MEMBER_IDX, MEMBER_NAME, MEMBER_EMAIL, MEMBER_CRE_DATE, MEMBER_NICKNAME, MEMBER_PHONE, MEMBER_BIRTHDATE, MEMBER_GRADE
			  FROM MEMBER
    		  <include refid="search"></include>
       		  AND MEMBER_GRADE = 'user'
       		  AND MEMBER_DEL_YN = 'n'
        	  ORDER BY MEMBER_IDX DESC)
        WHERE RNUM BETWEEN #{start} AND #{end}
	</select>
	
	<select id="adminSelectList" parameterType="map" resultMap="memberResultMap">
		SELECT M.MEMBER_IDX, M.MEMBER_EMAIL, M.MEMBER_NAME, M.MEMBER_NICKNAME, M.MEMBER_PHONE, M.MEMBER_BIRTHDATE, TMT.TOWN_NAME, M.MEMBER_GRADE
		FROM MEMBER M, (SELECT MEMBER_IDX, MANAGE_GRADE, T.TOWN_IDX, TOWN_NAME, TOWN_ADDRESS
    	FROM TOWN_MANAGEMENT TM, TOWN T
    	WHERE TM.TOWN_IDX = T.TOWN_IDX    
    	) TMT
		ORDER BY M.MEMBER_IDX
		DESC
	</select>
	
	<select id="memberReservationOne" parameterType="map" resultMap="memberResultMap">
		SELECT R.RESERVE_IDX, T.TOUR_NAME, R.RESERVE_APPLY_DATE, R.RESERVE_DEPOSIT_STATE, T.TOUR_IDX
		FROM RESERVE R, TOUR T
		WHERE R.TOUR_IDX = T.TOUR_IDX
		AND R.MEMBER_IDX = #{no}
		ORDER BY R.RESERVE_IDX DESC
	</select>
	
	<select id="reservationTotalCount" parameterType="map" resultType="Integer">
		SELECT COUNT(*)
		FROM RESERVE R, TOUR T
		WHERE R.TOUR_IDX = T.TOUR_IDX
		AND R.MEMBER_IDX = #{no}
		ORDER BY R.RESERVE_IDX DESC
	</select>
	
	<select id="reservationListOne" parameterType="map" resultMap="memberResultMap">
		SELECT RESERVE_IDX, TOUR_NAME, RESERVE_APPLY_DATE, RESERVE_DEPOSIT_STATE, TOUR_IDX
		FROM (SELECT ROWNUM, R.RESERVE_IDX, T.TOUR_NAME, R.RESERVE_APPLY_DATE, R.RESERVE_DEPOSIT_STATE, T.TOUR_IDX
              FROM RESERVE R, TOUR T
              WHERE R.TOUR_IDX = T.TOUR_IDX
              AND R.MEMBER_IDX = #{no}
              ORDER BY R.RESERVE_IDX DESC)
      	WHERE ROWNUM BETWEEN #{begin} AND #{end}
	</select>
	
	<select id="memberTourOne" parameterType="map" resultMap="memberResultMap">
		SELECT * 
     	FROM (SELECT RBMCF.*
        	  FROM( SELECT RB.REVIEW_IDX, REVIEW_TITLE, M.MEMBER_NICKNAME, REVIEW_CRE_DATE, REVIEW_RATING, REVIEW_READ_COUNT, C.COMMENT_COUNT
                 	FROM REVIEWBOARD RB, MEMBER M
                      ,(SELECT REVIEW_IDX, COUNT(*) AS COMMENT_COUNT FROM REVIEW_COMMENT GROUP BY REVIEW_IDX) C
                  	WHERE RB.MEMBER_IDX = M.MEMBER_IDX
                 	AND RB.REVIEW_IDX = C.REVIEW_IDX(+)
               	   	AND RB.MEMBER_IDX = #{no}
      ) RBMCF )
      ORDER BY REVIEW_IDX DESC
	</select>
	
	<select id="tourListOne" parameterType="map" resultMap="memberResultMap">
		SELECT * 
     	FROM (SELECT ROWNUM RNUM, RBMCF.*
        	  FROM( SELECT RB.REVIEW_IDX, REVIEW_TITLE, M.MEMBER_NICKNAME, REVIEW_CRE_DATE, REVIEW_RATING, REVIEW_READ_COUNT, C.COMMENT_COUNT
                 	FROM REVIEWBOARD RB, MEMBER M
                      ,(SELECT REVIEW_IDX, COUNT(*) AS COMMENT_COUNT FROM REVIEW_COMMENT GROUP BY REVIEW_IDX) C
                	WHERE RB.MEMBER_IDX = M.MEMBER_IDX
                 	AND RB.REVIEW_IDX = C.REVIEW_IDX(+)
               	   	AND RB.MEMBER_IDX = #{no}
                    ORDER BY REVIEW_IDX DESC
    	) RBMCF ) RBMCFR
    	WHERE RBMCFR.RNUM between #{begin} and #{end}
	</select>
	
	<select id="reviewTotalCount" parameterType="map" resultType="Integer">
		SELECT COUNT(*)
		FROM MEMBER M, REVIEWBOARD R
		WHERE M.MEMBER_IDX = #{no}
		ORDER BY R.REVIEW_IDX DESC
	</select>

	<select id="memberExist" parameterType="map"
		resultMap="memberResultMap">
		SELECT MEMBER_IDX, MEMBER_NAME, MEMBER_EMAIL, MEMBER_PHONE, MEMBER_BIRTHDATE, MEMBER_GRADE, MEMBER_NICKNAME, MEMBER_DEL_YN, MEMBER_NATIONAL
		FROM MEMBER
		WHERE MEMBER_EMAIL = #{email} AND MEMBER_PASSWORD = #{password}
	</select>
	
	<update id="memberUpdateOne" parameterType="memberVo">
		UPDATE MEMBER
		<set>
			<if test="name != ''">MEMBER_NAME = #{name},</if>
			<if test="nickname != ''">MEMBER_NICKNAME = #{nickname},</if>
			<if test="phone != ''">MEMBER_PHONE = #{phone},</if>
			<if test="password != ''">MEMBER_PASSWORD = #{password},</if>
			<if test="tempPassword != ''">MEMBER_TEMP_PWD = #{tempPassword},</if>
			<if test="national != ''">MEMBER_NATIONAL = #{national},</if>
			MEMBER_MOD_DATE = SYSDATE
		</set>
		WHERE MEMBER_IDX = #{no}
	</update>
	
	<insert id="memberInsertOne" 
		parameterType="com.edu.member.vo.MemberVo">
		INSERT INTO MEMBER (MEMBER_IDX, MEMBER_NAME, MEMBER_PHONE
			, MEMBER_NICKNAME, MEMBER_BIRTHDATE, MEMBER_EMAIL, MEMBER_NATIONAL
			, MEMBER_PASSWORD, MEMBER_CRE_DATE, MEMBER_MOD_DATE, MEMBER_TEMP_PWD)
		VALUES (SEQ_MEMBER_NO.NEXTVAL, #{name}, #{phone}
			, #{nickname}, #{birthdate}, #{email}, #{national}
			, #{password}, SYSDATE, SYSDATE, #{tempPassword})
	</insert>
	
	<select id="memberEmailOne" parameterType="map"
		resultMap="memberResultMap">
		SELECT MEMBER_EMAIL
		FROM MEMBER
		WHERE MEMBER_NAME = #{name}
		AND MEMBER_PHONE = #{phone}
		AND MEMBER_BIRTHDATE = #{birthdate}
	</select>
	
	<select id="memberPwdOne" parameterType="map"
		resultMap="memberResultMap">
		SELECT MEMBER_PASSWORD, MEMBER_NAME
		FROM MEMBER
		WHERE MEMBER_NAME = #{name}
		AND MEMBER_EMAIL = #{email}
	</select>
	
	<select id="memberNickNameList" parameterType="map" resultType="Integer">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE MEMBER_NICKNAME = #{nickname}
	</select>

	<select id="memberSelectOne" parameterType="int"
		resultMap="memberResultMap">
		SELECT MEMBER_IDX, MEMBER_NAME, MEMBER_NICKNAME, MEMBER_EMAIL, MEMBER_PHONE, MEMBER_PASSWORD, MEMBER_NATIONAL, MEMBER_CRE_DATE, MEMBER_BIRTHDATE
		FROM MEMBER
		WHERE MEMBER_IDX = #{no}
	</select>
	
	<select id="adminSelectOne" parameterType="int"
		resultMap="memberResultMap">
		SELECT M.MEMBER_IDX, M.MEMBER_EMAIL, M.MEMBER_NAME, M.MEMBER_NICKNAME, M.MEMBER_PHONE, M.MEMBER_BIRTHDATE, TMT.TOWN_NAME, M.MEMBER_GRADE, M.MEMBER_CRE_DATE, M.MEMBER_BIRTHDATE
		FROM MEMBER M, (SELECT MEMBER_IDX, MANAGE_GRADE, T.TOWN_IDX, TOWN_NAME, TOWN_ADDRESS
    					FROM TOWN_MANAGEMENT TM, TOWN T
    					WHERE TM.TOWN_IDX = T.TOWN_IDX    
    					) TMT
		WHERE M.MEMBER_IDX = #{no}
	</select>
	
	<update id="memberDelete" parameterType="int">
		UPDATE MEMBER
		SET
		MEMBER_NAME = ' ',
		MEMBER_EMAIL = SEQ_MEMBER_DEL_NO.NEXTVAL,
		MEMBER_NICKNAME = SEQ_MEMBER_DEL_NO.NEXTVAL,
		MEMBER_PASSWORD = ' ',
		MEMBER_PHONE = ' ',
		MEMBER_NATIONAL = ' ',
		MEMBER_MOD_DATE = SYSDATE,
		MEMBER_GRADE = ' ',
		MEMBER_DEL_YN = 'y',
		MEMBER_TEMP_PWD = ' '
		WHERE MEMBER_IDX = #{no}
	</update>

	<select id="memberPaymentSelectOne" parameterType="int"
		resultMap="memberResultMap">
		SELECT R.RESERVE_APPLY_NUM, R.RESERVE_PRICE, A.ACC_ACCOUNT_NUM AS TOUR_ACCOUNT_NUM, ACC_BANK, ACC_DEPOSITOR, R.MEMBER_IDX
		FROM TOUR T, ACCOUNT_MANAGEMENT A, RESERVE R
		WHERE T.TOWN_IDX = A.TOWN_IDX
		AND T.TOUR_IDX = R.TOUR_IDX
		AND RESERVE_IDX = #{reserveIdx}
	</select>
	
	<select id="memberSelectTotalCount" resultType="int" 
		parameterType="map">
		SELECT COUNT(*)
		FROM MEMBER
		<include refid="search"></include>
		AND MEMBER_GRADE = 'user'
	</select>
	
	<select id="commentTotalCount" parameterType="map" resultMap="memberResultMap">
		SELECT (SELECT COUNT(*)
                FROM REVIEW_COMMENT
                GROUP BY REVIEW_IDX
                HAVING REVIEW_IDX = #{reviewIdx}) AS LOVE
		FROM MEMBER M, REVIEWBOARD R
		WHERE M.MEMBER_IDX = R.MEMBER_IDX
		AND M.MEMBER_IDX = #{no}
		AND R.REVIEW_IDX = #{reviewIdx}
	</select>
	
	<select id="memberSelectCurPage" parameterType="map"
		resultType="int">
		SELECT FLOOR((ROWNUM-1) / 10) + 1, MEMBER_IDX, MEMBER_EMAIL, MEMBER_MNAME, MEMBER_CRE_DATE,
		FROM MEMBER
		<include refid="search"></include>
		AND MEMBER_IDX = #{no}
	</select>
	
	<update id="memberPaymentUpdateOne" parameterType="int">
		UPDATE RESERVE
	    SET
	    RESERVE_DEPOSIT_STATE = 'paid',
	    RESERVE_DEPOSIT_DATE = SYSDATE
	    WHERE RESERVE_IDX = #{reserveIdx}
	</update>
</mapper>