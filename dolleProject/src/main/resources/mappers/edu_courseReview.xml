<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.edu.courseReview">
	
	<sql id="search">
		<choose>
        	<!-- 제목 + 내용 검색일 경우  -->
        	<when test="searchOption == 'both'">
        		AND (REVIEW_TITLE LIKE '%' || #{keyword} || '%'
					OR REVIEW_CONTENT LIKE '%' || #{keyword} || '%')
        	</when>
        	<!-- 제목 검색일 경우  -->
        	<when test="searchOption == 'title'">
        		AND REVIEW_TITLE LIKE '%' || #{keyword} || '%'
        	</when>
        	<!-- 내용 검색일 경우  -->
        	<when test="searchOption == 'content'">
        		AND REVIEW_CONTENT LIKE '%' || #{keyword} || '%'
        	</when>
        	<!-- 작성자 검색일 경우  -->
        	<when test="searchOption == 'writer'">
        		AND M.MEMBER_NICKNAME LIKE '%' || #{keyword} || '%'
        	</when>
        </choose>
	</sql>
	
	<sql id="orderBy">
		<choose>
        	<!-- 최신순서일 경우  -->
        	<when test="orderOption == 'newest'">
        		ORDER BY RB.REVIEW_IDX DESC
        	</when>
        	<!-- 별점순서일 경우  -->
        	<when test="orderOption == 'starNum'">
        		ORDER BY RB.REVIEW_RATING DESC, RB.REVIEW_IDX DESC 
        	</when>
        	<!-- 정렬 순서일 경우  -->
        	<when test="orderOption == 'readCnt'">
        		ORDER BY RB.REVIEW_READ_COUNT DESC, RB.REVIEW_IDX DESC
        	</when>
        	<!-- 댓글수 순서일 경우 - 관리자용  -->
        	<when test="orderOption == 'cntComment'">
        		ORDER BY  C.COMMENT_COUNT DESC, RB.REVIEW_IDX DESC
        	</when>
        </choose>
	</sql>
	
	<resultMap type="com.edu.courseReview.vo.CourseReviewVo" 
		id="courseReivewMap">
		<id column="REVIEW_IDX" property="reviewIdx"/>
		<result column="MEMBER_IDX" property="reviewMemberIdx"/>
		<result column="COURSE_IDX" property="reviewCourseIdx"/>
		<result column="REVIEW_TITLE" property="reviewTitle"/>
		<result column="REVIEW_CONTENT" property="reviewContent"/>
		<result column="REVIEW_READ_COUNT" property="reviewReadCount"/>
		<result column="REVIEW_LIKE_COUNT" property="reviewLikeCount"/>
		<result column="REVIEW_RATING" property="reviewRating"/>
		<result column="REVIEW_CRE_DATE" property="reviewCreDate"
			javaType="java.util.Date"/>
		<result column="REVIEW_MOD_DATE" property="reviewModDate"
			javaType="java.util.Date"/>
	</resultMap>

	<resultMap type="com.edu.courseReview.vo.CourseReviewMemberCommentFileVo"  
		id="courseReviewMemberCommentFileMap">
		<id column="REVIEW_IDX" property="reviewIdx"/>
		<result column="MEMBER_IDX_R" property="reviewMemberIdx"/>
		<result column="COURSE_IDX_R" property="reviewCourseIdx"/>
		<result column="REVIEW_TITLE" property="reviewTitle"/>
		<result column="REVIEW_CONTENT" property="reviewContent"/>
		<result column="REVIEW_READ_COUNT" property="reviewReadCount"/>
		<result column="REVIEW_LIKE_COUNT" property="reviewLikeCount"/>
		<result column="REVIEW_RATING" property="reviewRating"/>
		<result column="REVIEW_CRE_DATE" property="reviewCreDate"
			javaType="java.util.Date"/>
		<result column="REVIEW_MOD_DATE" property="reviewModDate"
			javaType="java.util.Date"/>
		
		<result column="MEMBER_IDX" property="memberIdx"/>
		<result column="MEMBER_EMAIL" property="memberEmail"/>
		<result column="MEMBER_NICKNAME" property="memberNickname"/>
		
		<result column="COMMENT_IDX" property="commentIdx"/>
		<result column="REVIEW_IDX_C" property="commentReviewIdx"/>
		<result column="MEMBER_IDX_C" property="commentMemberIdx"/>
		<result column="COMMENT_CONTENT" property="commentContent"/>
		<result column="COMMENT_COUNT" property="commentCount"/>
		
		<result column="REVIEW_FILE_IDX" property="fileIdx"/>
		<result column="REVIEW_IDX_F" property="fileReviewIdx"/>
		<result column="REVIEW_ORIGINAL_FILE_NAME" property="fileOriginalName"/>
		<result column="REVIEW_STORED_FILE_NAME" property="fileStoredName"/>
	</resultMap> 

	<resultMap type="com.edu.courseReview.vo.CommentVo" id="commentMap">
		<id column="COMMENT_IDX" property="commentIdx"/>
		<result column="REVIEW_IDX" property="commentReviewIdx"/>
		<result column="MEMBER_IDX" property="commentMemberIdx"/>
		<result column="MEMBER_NICKNAME" property="memberNickname"/>
		<result column="COMMENT_CONTENT" property="commentContent"/>
		<result column="COMMENT_EMOTICON" property="commentEmoticon"/>
		<result column="COMMENT_CRE_DATE" property="creDate"/>
		<result column="COMMENT_MOD_DATE" property="modDate"/>
	</resultMap>

	<select id="reviewSelectList" parameterType="map" resultMap="courseReivewMap">
		SELECT REVIEW_IDX, REVIEW_TITLE 
		FROM REVIEWBOARD
	</select>

	<select id="reviewMemComFileList" parameterType="map"
		 resultMap="courseReviewMemberCommentFileMap">
		SELECT * 
		FROM (SELECT ROWNUM RNUM, RBMCF.*
				FROM( SELECT RB.REVIEW_IDX, REVIEW_TITLE, M.MEMBER_NICKNAME, REVIEW_READ_COUNT
					, REVIEW_RATING, REVIEW_LIKE_COUNT, REVIEW_CRE_DATE
					, C.COMMENT_COUNT, RF.REVIEW_STORED_FILE_NAME
						FROM REVIEWBOARD RB, MEMBER M
						    ,(SELECT REVIEW_IDX, COUNT(*) AS COMMENT_COUNT FROM REVIEW_COMMENT GROUP BY REVIEW_IDX) C
						    ,(SELECT REVIEW_IDX, REVIEW_STORED_FILE_NAME FROM REVIEW_FILE) RF
						WHERE RB.MEMBER_IDX = M.MEMBER_IDX
						AND RB.REVIEW_IDX = C.REVIEW_IDX(+)
						AND RB.REVIEW_IDX = RF.REVIEW_IDX(+)
						<!-- 검색 -->
						<include refid="search"></include>
						<!-- 정렬 -->
						<include refid="orderBy"></include>) RBMCF )
		WHERE RNUM BETWEEN #{start} AND #{end}
	</select> 
	
	<select id="reviewSelectTotalCount" resultType="int">
		SELECT COUNT(*)
		FROM REVIEWBOARD
<!-- 		<include refid="search"></include> -->
	</select>
	
	<insert id="reviewInsertOne" parameterType="CourseReviewVo">
		INSERT INTO REVIEWBOARD
		(REVIEW_IDX, MEMBER_IDX, COURSE_IDX, REVIEW_TITLE, REVIEW_CONTENT, REVIEW_RATING)
		VALUES(SEQ_REVIEW_NO.NEXTVAL, #{reviewMemberIdx}, 1, #{reviewTitle}, #{reviewContent}, #{reviewRating})
	</insert>
	
	<insert id="fileInsertOne" parameterType="map">
		INSERT INTO REVIEW_FILE
		(REVIEW_FILE_IDX, REVIEW_IDX, REVIEW_ORIGINAL_FILE_NAME, REVIEW_STORED_FILE_NAME, REVIEW_FILE_SIZE)
		VALUES(SEQ_REVIEW_FILE_NO.NEXTVAL, #{review_idx}, #{review_original_file_name},
			 #{review_stored_file_name}, #{review_file_size})
	</insert>
	<!-- 파일 insert시 사용 -->
	<select id="reviewNewestSelectIdx" resultType="int">
		SELECT REVIEW_IDX 
		FROM (SELECT ROWNUM, REVIEW_IDX
				FROM REVIEWBOARD
				ORDER BY REVIEW_IDX DESC)
		WHERE ROWNUM = 1
	</select>
	
	
	<select id="reviewSelectOne" parameterType="int" 
		resultMap="courseReviewMemberCommentFileMap">
		SELECT RB.REVIEW_IDX, M.MEMBER_NICKNAME, RB.REVIEW_TITLE, RB.REVIEW_CONTENT, RB.REVIEW_RATING, RB.REVIEW_LIKE_COUNT
			, RB.REVIEW_READ_COUNT, RF.REVIEW_STORED_FILE_NAME, RB.REVIEW_CRE_DATE, RB.REVIEW_MOD_DATE
		FROM REVIEWBOARD RB, MEMBER M	
		    ,(SELECT REVIEW_IDX, COUNT(*) AS COMMENT_COUNT FROM REVIEW_COMMENT GROUP BY REVIEW_IDX) C
		    ,(SELECT REVIEW_IDX, REVIEW_STORED_FILE_NAME FROM REVIEW_FILE) RF
		WHERE RB.MEMBER_IDX = M.MEMBER_IDX
		AND RB.REVIEW_IDX = C.REVIEW_IDX(+)
		AND RB.REVIEW_IDX = RF.REVIEW_IDX(+)
		AND RB.REVIEW_IDX = #{review_idx}
	</select>
	
	
	
	<update id="increaseReadCount" parameterType="int">
		UPDATE REVIEWBOARD
		SET REVIEW_READ_COUNT = (REVIEW_READ_COUNT + 1)
		WHERE REVIEW_IDX = #{reviewIdx}
	</update>
	
	
	<update id="reviewUpdateOne" parameterType="CourseReviewVo">
		UPDATE REVIEWBOARD
		SET REVIEW_TITLE = #{reviewTitle}, REVIEW_CONTENT = #{reviewContent}
		, REVIEW_RATING = #{reviewRating}, REVIEW_MOD_DATE = SYSDATE
		WHERE REVIEW_IDX = #{reviewIdx}
	</update>
	
	<update id="fileUpdateOne" parameterType="map">
		UPDATE REVIEW_FILE
		SET REVIEW_ORIGINAL_FILE_NAME = #{review_original_file_name}
		, REVIEW_STORED_FILE_NAME = #{review_stored_file_name}
		, REVIEW_FILE_SIZE = #{review_file_size}
		WHERE REVIEW_IDX = #{review_idx}
	</update>
	
	<select id="fileSelectStoredName" parameterType="int"
		resultType="map">
		SELECT REVIEW_FILE_IDX, REVIEW_STORED_FILE_NAME
		FROM REVIEW_FILE
		WHERE REVIEW_IDX = #{review_idx}
	</select>
	
	
	<delete id="reviewDeleteOne" parameterType="int">
		DELETE FROM REVIEWBOARD
		WHERE REVIEW_IDX = #{review_idx}
	</delete>
	
	<delete id="fileDeleteOne" parameterType="int">
		DELETE FROM REVIEW_FILE
		WHERE REVIEW_IDX = #{review_idx}
	</delete>
	<!-- 관리자용 다중삭제 -->
	<delete id="reviewDeleteList" parameterType="java.util.List">
		<if test="list.size != 0">
		DELETE FROM REVIEWBOARD
		WHERE REVIEW_IDX IN
			<foreach collection="list" item="item"
				open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>
	</delete>
	<delete id="fileDeleteList" parameterType="java.util.List">
		<if test="list.size != 0">
		DELETE FROM REVIEW_FILE
		WHERE REVIEW_IDX IN
			<foreach collection="list" item="item"
				open="(" close=")" separator=",">
				#{item}
			</foreach>
		</if>	
	</delete>
	<delete id="commentDeleteList" parameterType="java.util.List">
		<if test="list.size != 0">
		DELETE FROM REVIEW_COMMENT
		WHERE REVIEW_IDX IN
			<foreach collection="list" item="item"
				open="(" close=")" separator=",">
				#{item}
			</foreach>	
		</if>
	</delete>
	
	
	<!-- 댓글 -->
	<insert id="commentInsertOne" parameterType="com.edu.courseReview.vo.CommentVo">
		INSERT INTO REVIEW_COMMENT
		(COMMENT_IDX, REVIEW_IDX, MEMBER_IDX, COMMENT_CONTENT, COMMENT_EMOTICON
		, COMMENT_CRE_DATE, COMMENT_MOD_DATE)
		VALUES(SEQ_COMMENT_NO.NEXTVAL, #{commentReviewIdx}, #{commentMemberIdx}
		, #{commentContent}, #{commentEmoticon}, SYSDATE, SYSDATE)
	</insert>
	
	<select id="commentSelectList" parameterType="int" resultMap="commentMap">
		SELECT COMMENT_IDX, RC.MEMBER_IDX, M.MEMBER_NICKNAME, COMMENT_CONTENT, COMMENT_EMOTICON, COMMENT_CRE_DATE, COMMENT_MOD_DATE
		FROM REVIEW_COMMENT RC, MEMBER M
		WHERE REVIEW_IDX = #{commentReviewIdx}
        AND RC.MEMBER_IDX = M.MEMBER_IDX
		ORDER BY COMMENT_IDX DESC
	</select>
	<!-- 사용자용 삭제 -->
	<delete id="commentDeleteOne" parameterType="map">
		DELETE FROM REVIEW_COMMENT
		WHERE COMMENT_IDX = #{commentIdx}
		AND MEMBER_IDX = #{commentMemberIdx}
	</delete>
	
	<update id="commentUpdateOne" parameterType="com.edu.courseReview.vo.CommentVo">
		UPDATE REVIEW_COMMENT
		SET COMMENT_CONTENT = #{commentContent}
			, COMMENT_MOD_DATE = SYSDATE
        WHERE COMMENT_IDX = #{commentIdx}
	</update>
	
	
	
</mapper>